1. 상속
 - 상속이란 자식클래스가 부모클래스의 필드와 메쏘드를 그대로 물려받는 것이다.
  이를 통해 클래스들간에 중복 선언을 피할 수 있고, 필드, 메쏘드 재사용으로 코드가 간결해진다. 그리고 클래스간의 계층적 관리가 쉬워짐.
  상속은 한 부모에서만 받을 수 있고, extends 클래스명 으로 나타낸다. 또한 자식 클래스는 상속받은것 이외에 추가로 메쏘드 생성이 가능하다.
  
2. 캡슐화(  정보은닉 )
- 캡슐화란 객체의 필드, 메소드를 하나로 묶고 실제 구현 내용을 감추는 것을 말한다. 외부 객체는 객체 내부의 구조를 알지 못하며 객체가 노출해서 
제공하는 필드와 메소드만 이용할수 있다. 필드와 메소드를 캡슐화하는 이유는 외부의 잘못된 사용으로 인해 객체가 손상되지 않도록 보호하기 위함이다.
자바언어는 캡슐화된 멤버를 노출시킬 것인지 숨길 것인지를 결정하기 위해 접근제한자를 사용한다. 접근제한자는 객체의 필드와 메소드의 사용범위를
제한함으로써 외부로부터 보호한다.
 getter, setter메소드를 통하여 접근하게 만들어서 객체를 보호한다.

3. 다형성
오버로딩(  overloading )  :  
기존에 없던 새로운 형태의 메서드를 정의하는 것으로 재사용 하기위해 이름은 같지만 매개변수의 개수나 데이터 형식이 다른 것이다.
클래스는 여러 개의 생성자를 가질 수 있으며 같은 이름의 생성자를 여러 개를 중첩하여 사용할 수 있다. 생성자의 이름은 같지만 생성자가 가지는 매개변수의 타입과
개수는 반드시 달라야 하고 한 클래스에 같은 매개변수를 가진 생성자를 2개 이상 사용하면 오류가 발생한다. 객체가 생성될 때 각기 다른 생성자를 통하여 
초기화를 실행하고 new 키워드에서 지정된 매개변수와 같은 형태의 매개변수를 가진 생성자가 실행한다. 같은 개수의 매개변수에서도 타입만 다르면 사용 가능하다.

오버라이딩( overriding )   : 
- 기존에 있는 메서드를 재정의하는 것으로 메서드 이름은 같으나 안에 정의되는 내용은 다르고 매개변수의 개수나 데이터 형식과 반환 타입은 같다.
- 상속관계에 있는 클래스들 간에 같은 이름의 메서드를 정의하는 것으로 상위 클래스의 메서드와 하위클래서의 메서드가 이름, 매개변수의 타입, 개수까지 
 모두 같아야 한다.
- 기존 클래스를 이용하여 새로운 클래스를 만들 때 기존 클래스의 매서드와 의미는 같지만 구현 부분에서 약간의 변화가 필요하다면 메서드 오버라이딩을 
 이용하여 새로운 클래스 작성이 가능하다.